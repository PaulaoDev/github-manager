{"version":3,"sources":["Octocat.png","components/User.js","components/Loader.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Date","prototype","today","this","getDate","getMonth","getFullYear","timeNow","getHours","getMinutes","getSeconds","backgrounds","genBack","Math","floor","random","length","User","state","details","repos","loadedUser","data","date","created_at","Swal","title","name","text","bio","imageUrl","avatar_url","imageWidth","imageHeight","imageAlt","animation","confirmButtonText","showCancelButton","confirmButtonColor","cancelButtonColor","html","concat","id","login","html_url","then","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","result","wrap","_context","prev","next","value","_this","loadRepos","sent","console","log","showConfirmButton","map","repo","join","stop","_x","apply","arguments","loadDetails","Promise","Resolve","Reject","fetch","res","json","catch","err","_callee2","e","i","_context2","preventDefault","_this2","card","props","react_default","createElement","className","style","width","src","alt","href","onClick","Component","Loader","page","App","cards","loading","load","setState","prevPage","nextPage","Loader_Loader","User_User","key","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.beaaed69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Octocat.b2ffb3a3.png\";","import React, { Component } from 'react';\r\nimport Swal from 'sweetalert2';\r\n\r\n// For todays date;\r\nDate.prototype.today = function () { \r\n    return ((this.getDate() < 10)?\"0\":\"\") + this.getDate() +\"/\"+(((this.getMonth()+1) < 10)?\"0\":\"\") + (this.getMonth()+1) +\"/\"+ this.getFullYear();\r\n}\r\n\r\n// For the time now\r\nDate.prototype.timeNow = function () {\r\n     return ((this.getHours() < 10)?\"0\":\"\") + this.getHours() +\":\"+ ((this.getMinutes() < 10)?\"0\":\"\") + this.getMinutes() +\":\"+ ((this.getSeconds() < 10)?\"0\":\"\") + this.getSeconds();\r\n}\r\n\r\nconst backgrounds = [\r\n    \"bg-primary\",\r\n    \"bg-secondary\",\r\n    \"bg-success\",\r\n    \"bg-danger\",\r\n    \"bg-warning\",\r\n    \"bg-info\",\r\n    \"bg-light\",\r\n    \"bg-dark\",\r\n    \"bg-white\",\r\n    \"bg-transparent\"\r\n];\r\n\r\nconst genBack = () => backgrounds[Math.floor(Math.random() * backgrounds.length)];\r\n\r\nexport default class User extends Component {\r\n\r\n    state = {\r\n        details: [],\r\n        repos: []\r\n    };\r\n\r\n    loadedUser = data => {\r\n        let date = new Date(data.created_at);\r\n        Swal({\r\n            title: data.name,\r\n            text: data.bio || 'Not exists bio',\r\n            imageUrl: data.avatar_url,\r\n            imageWidth: 400,\r\n            imageHeight: 300,\r\n            imageAlt: data.name + ' profile image',\r\n            animation: true,\r\n            confirmButtonText: \"Load Repositories\",\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            html: `\r\n                <p><code>ID: </code>${data.id}</p>\r\n                <p><code>Login: </code>${data.login}</p>\r\n                <p><code>Profile: </code>${data.html_url}</p>\r\n                <p><code>Created at: </code>${date.today()} at ${date.timeNow()}</p>\r\n            `\r\n        }).then(async (result) => {\r\n            if (result.value) {\r\n                const repos = await this.loadRepos(data.login);\r\n                console.log(repos);\r\n                Swal({\r\n                    title: data.name,\r\n                    text: 'List all repositorys from ' + data.name,\r\n                    imageUrl: data.avatar_url,\r\n                    imageWidth: 400,\r\n                    imageHeight: 300,\r\n                    imageAlt: data.name + ' profile image',\r\n                    animation: true,\r\n                    showConfirmButton: false,\r\n                    showCancelButton: true,\r\n                    confirmButtonColor: '#3085d6',\r\n                    cancelButtonColor: '#d33',\r\n                    html: `\r\n                        ${ repos.map(repo => `\r\n                            <div class=\"card ${genBack()}\" style=\"width: 100%;margin-top:20px;margin-bottom:20px;\">\r\n                                <ul class=\"list-group list-group-flush\">\r\n                                    <li class=\"list-group-item\">\r\n                                        <code>ID: </code>${repo.id}\r\n                                    </li>\r\n                                    <li class=\"list-group-item\">\r\n                                        <code>Name: </code>${repo.name}\r\n                                    </li>\r\n                                    <li class=\"list-group-item\">\r\n                                        <code>URL: </code>\r\n                                        <a href=\"${repo.html_url}\" target=\"_blank\">Access link of repository</a>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        `).join('') }\r\n                    `\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    loadDetails = (id) => new Promise((Resolve, Reject) => {\r\n        fetch('/api/user/' + id)\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            Resolve(res);\r\n          })\r\n          .catch(err => Reject(err));\r\n    });\r\n    \r\n    loadRepos = (id) => new Promise((Resolve, Reject) => {\r\n        fetch('/api/user/' + id + '/repos')\r\n          .then(res => res.json())\r\n          .then(res => {\r\n            Resolve(res);\r\n          })\r\n          .catch(err => Reject(err));\r\n    });\r\n\r\n    details = async (e, i) => {\r\n        e.preventDefault();\r\n        const data = await this.loadDetails(i);\r\n        this.loadedUser(data);\r\n    };\r\n\r\n    render(){\r\n        const card = this.props.data;\r\n        return (\r\n            <div className=\"col\">\r\n              <div className=\"card\" style={{width: \"18rem\"}}>\r\n                <img className=\"card-img-top\" src={card.avatar_url} alt=\"Card image cap\"/>\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\"><code>ID: </code>  {card.id}</h5>\r\n                  <h5 className=\"card-title\"><code>Login: </code>  {card.login}</h5>\r\n                  <p className=\"card-text\"></p>\r\n                  <a href=\"#\" className=\"btn btn-primary\" onClick={(e) => this.details(e, card.login)}>\r\n                    Read More\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport './loader.css';\r\n\r\nexport default class Loader extends Component {\r\n\r\n    render(){\r\n\r\n        return (\r\n            <div className=\"main-loader\">\r\n                <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n            </div>\r\n        );\r\n\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport logo from './Octocat.png';\nimport './App.css';\nimport User from './components/User';\nimport Loader from './components/Loader';\n\nlet page = 0;\n\nclass App extends Component {\n\n  state = {\n    cards: [],\n    loading: true\n  };\n\n  componentDidMount(){\n    this.load();\n  }\n\n  load = (page) => {\n    fetch('/api/' + page)\n      .then(res => res.json())\n      .then(res => this.setState({\n        cards: res,\n        loading: false\n      }));\n  };\n\n  prevPage = (e) => {\n    e.preventDefault();\n    page = page > 0 ? page - 1 : 0;\n    this.setState({ loading: true });\n    this.load(page);\n  };\n\n  nextPage = (e) => {\n    e.preventDefault();\n    page = page + 1;\n    this.setState({ loading: true });\n    this.load(page);\n  };\n\n  render() {\n    const cards = this.state.cards;\n\n    if(this.state.loading){\n      return <Loader/>;\n    }\n\n    return (\n      <div className=\"App container-flex d-flex justify-content-center align-items-center\">\n\n        { cards.map((card, i) => (<User data={card} key={i}/>))}\n\n        <nav aria-label=\"Page navigation example\">\n          <ul className=\"pagination\">\n            <li className=\"page-item\"><a className=\"page-link\" href=\"#\" onClick={this.prevPage}>Previous</a></li>\n            <li className=\"page-item\"><a className=\"page-link\" href=\"#\" onClick={this.nextPage}>Next</a></li>\n          </ul>\n        </nav>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}